use crate::{bench::Context, Bencher};

/// Compile-time benchmark entry generated by `#[divan::bench]`.
pub struct Entry {
    /// The benchmarked function's reported name.
    pub name: &'static str,

    /// The benchmarked function's fully-qualified path.
    pub path: &'static str,

    /// The file where the benchmarked function was defined.
    pub file: &'static str,

    /// The line where the benchmarked function was defined.
    pub line: u32,

    /// Whether this entry was marked with [`#[ignore]`](https://doc.rust-lang.org/reference/attributes/testing.html#the-ignore-attribute).
    pub ignore: bool,

    /// The benchmarking loop.
    pub bench_loop: BenchLoop,
}

/// Entries generated by `#[divan::bench]`.
#[linkme::distributed_slice]
pub static ENTRIES: [Entry] = [..];

/// `Entry` benchmarking loop.
pub enum BenchLoop {
    /// Statically-constructed without context.
    Static(fn(&mut Context)),

    /// Runtime-constructed with context.
    Runtime(fn(Bencher)),
}
