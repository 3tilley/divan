use std::str::Split;

use crate::{bench::BenchOptions, Bencher};

mod tree;

pub(crate) use tree::EntryTree;

/// Entries generated by `#[divan::bench]`.
#[linkme::distributed_slice]
pub static ENTRIES: [Entry] = [..];

/// Entry groups generated by `#[divan::bench_group]`.
#[linkme::distributed_slice]
pub static ENTRY_GROUPS: [EntryGroup] = [..];

/// Compile-time benchmark entry generated by `#[divan::bench]`.
pub struct Entry {
    /// The benchmarked function's name.
    pub display_name: &'static str,

    /// The benchmarked function's original name.
    pub raw_name: &'static str,

    /// The benchmarked function's raw `module_path!()`.
    pub module_path: &'static str,

    /// The file where the benchmarked function was defined.
    pub file: &'static str,

    /// The line where the benchmarked function was defined.
    pub line: u32,

    /// The column where the benchmarked function was defined.
    pub col: u32,

    /// Whether this benchmark was marked with [`#[ignore]`](https://doc.rust-lang.org/reference/attributes/testing.html#the-ignore-attribute).
    pub ignore: bool,

    /// Configures the benchmarker via attribute options.
    pub bench_options: Option<fn() -> BenchOptions>,

    /// The benchmarking function.
    pub bench: fn(Bencher),
}

/// Compile-time benchmark group generated by `#[divan::bench_group]`.
pub struct EntryGroup {
    /// The benchmarked group's display name.
    pub display_name: &'static str,

    /// The benchmarked group's original name.
    ///
    /// This is used to find an `EntryGroup` for an `Entry`.
    pub raw_name: &'static str,

    /// The benchmarked group's raw `module_path!()`.
    pub module_path: &'static str,

    /// The file where the group was defined.
    pub file: &'static str,

    /// The line where the group was defined.
    pub line: u32,

    /// The column where the group was defined.
    pub col: u32,

    /// Whether this group was marked with [`#[ignore]`](https://doc.rust-lang.org/reference/attributes/testing.html#the-ignore-attribute).
    pub ignore: bool,

    /// Configures the benchmarker via attribute options.
    pub bench_options: Option<fn() -> BenchOptions>,
}

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub(crate) struct EntryLocation {
    pub file: &'static str,
    pub line: u32,
    pub col: u32,
}

type PathComponents = Split<'static, &'static str>;

impl Entry {
    fn module_path_components(&self) -> PathComponents {
        self.module_path.split("::")
    }

    fn location(&self) -> EntryLocation {
        EntryLocation { file: self.file, line: self.line, col: self.col }
    }
}

impl EntryGroup {
    fn module_path_components(&self) -> PathComponents {
        self.module_path.split("::")
    }

    fn location(&self) -> EntryLocation {
        EntryLocation { file: self.file, line: self.line, col: self.col }
    }
}
